y <- rep(0,n)
epsw <- rnorm(n)^3
epsx <- rnorm(n)^3
epsy <- rnorm(n)^3
for(i in 3:n)
{
x[i] <- 0.3*x[i-1]+0.5*epsx[i]
y[i] <- 0.8*y[i-1]+0.8*x[i-1]+0.5*epsy[i]
w[i] <- -0.6*w[i-1]+0.8*x[i-2]+0.5*epsw[i]
}
mean(x)
mean(y)
var(x)
var(y)
c <- ccf(x,y)
c$acf
n <- 1000000
w <- rep(0,n)
x <- rep(0,n)
y <- rep(0,n)
epsw <- rnorm(n)^3
epsx <- rnorm(n)^3
epsy <- rnorm(n)^3
for(i in 3:n)
{
x[i] <- 0.3*x[i-1]+0.5*epsx[i]
y[i] <- 0.8*y[i-1]+0.8*x[i-1]+0.5*epsy[i]
w[i] <- -0.6*w[i-1]+0.8*x[i-2]+0.5*epsw[i]
}
mean(x)
mean(y)
var(y)
var(x)
c <- ccf(x,y)
round(10*log10(1000000/2))
c <- ccf(x,y)
c$acf
n <- 1000000
w <- rep(0,n)
x <- rep(0,n)
y <- rep(0,n)
epsw <- rnorm(n)^3
epsx <- rnorm(n)^3
epsy <- rnorm(n)^3
for(i in 3:n)
{
x[i] <- 0.3*x[i-1]+0.5*epsx[i]
y[i] <- 0.8*y[i-1]+0.8*x[i-1]+0.5*epsy[i]
w[i] <- -0.6*w[i-1]+0.8*x[i-2]+0.5*epsw[i]
}
c <- ccf(x,y)
y
c$acf
c <- ccf(x,y)
c$acf
a <- acf(cbind(x,y))
a
a <- acf(cbind(x,y))
a
1 %*% 1
1.0 %*% 1.2
1.0 * 1.2
ceiling(3.2)
eps = y
alpha = 0.05
max_lag = 10
corr1 <- ccf(x,eps,lag.max=max_lag,type = "correlation",plot = FALSE)
T <- max(abs(corr1$acf))
T
sigma <- matrix(0,2*max_lag,2*max_lag)
sigma
max_lag = 5
corr1 <- ccf(x,eps,lag.max=max_lag,type = "correlation",plot = FALSE)
T <- max(abs(corr1$acf))
sigma <- matrix(0,2*max_lag,2*max_lag)
T
acr <- acf(x,lag.max=2*max_lag,type = "correlation",plot=FALSE)
for(i in 1:(2*max_lag))
{
for(j in 1:i)
{
sigma[i,j]=acr$acf[1+(i-j)]
sigma[j,i]=acr$acf[1+(i-j)]
}
}
sigma <- sigma/length(x)
R <- chol(sigma)
R
num_simulations<-20000
z <- matrix(rnorm(2*max_lag*num_simulations),num_simulations,2*max_lag)
z <- z%*%R
z
maxz <- apply(abs(z),1,max)
maxz
z
maxz
abs(z)
maxz
length(maxz)
T
quan <- maxzorder[ceiling(num_simulations-alpha*num_simulations)]
quan
quan <- maxzorder[ceiling(num_simulations-alpha*num_simulations)]
maxzorder <- sort(maxz)
quan <- maxzorder[ceiling(num_simulations-alpha*num_simulations)]
quan
sum(maxzorder>T)
sum(maxzorder>T)/num_simulations
resu <- list(statistic = T, crit.value = quan, p.value = pval)
resu
pval <- sum(maxzorder>T)/num_simulations
resu <- list(statistic = T, crit.value = quan, p.value = pval)
resu
corr1 <- ccf(x,eps,lag.max=max_lag,type = "correlation",plot = FALSE)
T <- max(abs(corr1$acf))
sigma <- matrix(0,2*max_lag,2*max_lag)
# estimate cov of x-cor.
# Theorem 11.2.3 in brockwell and davis: "bartletts formula"
# H_0: rho_{12} == 0 => non-zero summands only for j = k - h
acr <- acf(x,lag.max=2*max_lag,type = "correlation",plot=FALSE)
for(i in 1:(2*max_lag))
{
for(j in 1:i)
{
sigma[i,j]=acr$acf[1+(i-j)]
sigma[j,i]=acr$acf[1+(i-j)]
}
}
sigma <- sigma/length(x)
R <- chol(sigma)
num_simulations<-20000
z <- matrix(rnorm(2*max_lag*num_simulations),num_simulations,2*max_lag)
z <- z%*%R
maxz <- apply(abs(z),1,max)
maxzorder <- sort(maxz)
quan <- maxzorder[ceiling(num_simulations-alpha*num_simulations)]
pval <- sum(maxzorder>T)/num_simulations
resu <- list(statistic = T, crit.value = quan, p.value = pval)
resu
n <- 10000
w <- rep(0,n)
x <- rep(0,n)
y <- rep(0,n)
epsw <- rnorm(n)^3
epsx <- rnorm(n)^3
epsy <- rnorm(n)^3
for(i in 3:n)
{
x[i] <- 0.3*x[i-1]+0.5*epsx[i]
y[i] <- 0.8*y[i-1]+0.8*x[i-1]+0.5*epsy[i]
w[i] <- -0.6*w[i-1]+0.8*x[i-2]+0.5*epsw[i]
}
x
eps = y
alpha = 0.05
max_lag = 5
corr1 <- ccf(x,eps,lag.max=max_lag,type = "correlation",plot = FALSE)
T <- max(abs(corr1$acf))
sigma <- matrix(0,2*max_lag,2*max_lag)
# estimate cov of x-cor.
# Theorem 11.2.3 in brockwell and davis: "bartletts formula"
# H_0: rho_{12} == 0 => non-zero summands only for j = k - h
acr <- acf(x,lag.max=2*max_lag,type = "correlation",plot=FALSE)
for(i in 1:(2*max_lag))
{
for(j in 1:i)
{
sigma[i,j]=acr$acf[1+(i-j)]
sigma[j,i]=acr$acf[1+(i-j)]
}
}
sigma <- sigma/length(x)
R <- chol(sigma)
num_simulations<-20000
z <- matrix(rnorm(2*max_lag*num_simulations),num_simulations,2*max_lag)
z <- z%*%R
maxz <- apply(abs(z),1,max)
maxzorder <- sort(maxz)
quan <- maxzorder[ceiling(num_simulations-alpha*num_simulations)]
pval <- sum(maxzorder>T)/num_simulations
resu <- list(statistic = T, crit.value = quan, p.value = pval)
resu
max(c(1,3,4))
max(c(1,3,4))
max(c(1,3,4))
max(c(1,3,4),1)
max(c(1,3,4),2)
max(c(1,3,4),10)
x<- cumsum(rnorm(100))
y <- cumsum(rnorm(100))
z <- sin(seq(0, pi, length.out=100))
## Compute the distance and check for coherent results
diss.CORT(x, y, 2)
install.packages("TSclust")
library(TSclust)
## Compute the distance and check for coherent results
library(tsclust)
## Compute the distance and check for coherent results
library(diss)
## Compute the distance and check for coherent results
library(TSclust)
setwd('/home/kassaad/Documents/Codes/Causal-Summary-Graph-time-series-different-sampling-rate/baselines/ts-FCI/RCode_TETRADjar_tsFCI/RCode_TETRADjar')
start_up <- function() {
source('dconnected.R')
source('genData.R')
source('main_tetrad_fci.R')
source('plot_timeseries.R')
source('Plotting_Commands_Barplots.R')
source('plot_ts_pag.R')
source('realData_tsfci.R')
source('scores.R')
source('Simulation_Commands.R')
source('Simulations_data_cont.R')
source('Simulations_data_disc.R')
source('Simulations_graph.R')
source('Tetrad_R_interact.R')
source('ts_functions.R')
}
start_up()
temporal_to_summary <- function(temporal_graph, nrep=5){
dlag <- ncol(temporal_graph)
d <- dlag/nrep
idx_count = rep(1:d, nrep)
summary_graph = matrix(data=0, nrow=d, ncol = d)
for (i in 1:dlag){
temp = temporal_graph[i,]
for (j in 1:dlag){
if (temp[j]==2){
i_summary <- idx_count[i]
j_summary <- idx_count[j]
summary_graph[i_summary,j_summary] = 2
}
else if (temp[j]==3){
i_summary <- idx_count[i]
j_summary <- idx_count[j]
if (summary_graph[i_summary,j_summary]!=2){
summary_graph[i_summary,j_summary] = 3
}
}
else if (temp[j]==1){
i_summary <- idx_count[i]
j_summary <- idx_count[j]
if (summary_graph[i_summary,j_summary]==0){
summary_graph[i_summary,j_summary] = 1
}
}
}
}
return(summary_graph)
}
scale_name <- "unscaled"
struct_name <- "7ts_hidden"
path_data <- '/home/kassaad/Documents/Codes/Causal-Summary-Graph-time-series-different-sampling-rate/data/simulated_ts_data'
path_algo <- '/home/kassaad/Documents/Codes/Causal-Summary-Graph-time-series-different-sampling-rate/baselines/ts-FCI/RCode_TETRADjar_tsFCI/RCode_TETRADjar'
path_save_res <- '/home/kassaad/Documents/Codes/Causal-Summary-Graph-time-series-different-sampling-rate/experiments/causal_discovery/R_results/tsfci'
setwd(paste(path_data,scale_name, sep="/"))
filenames <- list.files(struct_name, pattern="*.csv")
filenames
struct_name
path_data
paste(path_data,scale_name, sep="/")
struct_name
struct_name <- "7ts_0h"
setwd(paste(path_data,scale_name, sep="/"))
filenames <- list.files(struct_name, pattern="*.csv")
filenames
sig=0.01
lag=5
for (i in 1:length(filenames)){
setwd(paste(path_data,scale_name, sep="/"))
data = read.csv(paste(struct_name,filenames[i],sep="/"))
data$X <- NULL
setwd(path_algo)
tsfci_graph <- realData_tsfci(data=data, sig=sig, nrep=lag, inclIE=FALSE, alg="tscfci", datatype="continuous", makeplot=FALSE)
unit_graph <- temporal_to_summary(tsfci_graph, nrep=lag)
print(unit_graph)
#  setwd(path_save_res)
#  path<-paste(struct_name,filenames[i],sep="/res_")
#  write.csv(unit_graph,path)
}
setwd('/home/kassaad/Documents/Codes/Causal-Summary-Graph-time-series-different-sampling-rate/baselines/ts-FCI/RCode_TETRADjar_tsFCI/RCode_TETRADjar')
start_up <- function() {
source('dconnected.R')
source('genData.R')
source('main_tetrad_fci.R')
source('plot_timeseries.R')
source('Plotting_Commands_Barplots.R')
source('plot_ts_pag.R')
source('realData_tsfci.R')
source('scores.R')
source('Simulation_Commands.R')
source('Simulations_data_cont.R')
source('Simulations_data_disc.R')
source('Simulations_graph.R')
source('Tetrad_R_interact.R')
source('ts_functions.R')
}
start_up()
temporal_to_summary <- function(temporal_graph, nrep=5){
dlag <- ncol(temporal_graph)
d <- dlag/nrep
idx_count = rep(1:d, nrep)
summary_graph = matrix(data=0, nrow=d, ncol = d)
for (i in 1:dlag){
temp = temporal_graph[i,]
for (j in 1:dlag){
if (temp[j]==2){
i_summary <- idx_count[i]
j_summary <- idx_count[j]
summary_graph[i_summary,j_summary] = 2
}
else if (temp[j]==3){
i_summary <- idx_count[i]
j_summary <- idx_count[j]
if (summary_graph[i_summary,j_summary]!=2){
summary_graph[i_summary,j_summary] = 3
}
}
else if (temp[j]==1){
i_summary <- idx_count[i]
j_summary <- idx_count[j]
if (summary_graph[i_summary,j_summary]==0){
summary_graph[i_summary,j_summary] = 1
}
}
}
}
for (i in 1:ncol(summary_graph)){
if(summary_graph[i,i] ==2){
summary_graph[i,i] =1
}
}
return(summary_graph)
}
scale_name <- "unscaled"
struct_name <- "7ts_0h"
path_data <- '/home/kassaad/Documents/Codes/Causal-Summary-Graph-time-series-different-sampling-rate/data/simulated_ts_data'
path_algo <- '/home/kassaad/Documents/Codes/Causal-Summary-Graph-time-series-different-sampling-rate/baselines/ts-FCI/RCode_TETRADjar_tsFCI/RCode_TETRADjar'
path_save_res <- '/home/kassaad/Documents/Codes/Causal-Summary-Graph-time-series-different-sampling-rate/experiments/causal_discovery/R_results/tsfci'
setwd(paste(path_data,scale_name, sep="/"))
filenames <- list.files(struct_name, pattern="*.csv")
sig=0.01
lag=5
for (i in 1:length(filenames)){
setwd(paste(path_data,scale_name, sep="/"))
data = read.csv(paste(struct_name,filenames[i],sep="/"))
data$X <- NULL
setwd(path_algo)
tsfci_graph <- realData_tsfci(data=data, sig=sig, nrep=lag, inclIE=FALSE, alg="tscfci", datatype="continuous", makeplot=FALSE)
unit_graph <- temporal_to_summary(tsfci_graph, nrep=lag)
print(unit_graph)
setwd(path_save_res)
path<-paste(struct_name,filenames[i],sep="/res_")
write.csv(unit_graph,path)
}
struct_name
path
#setwd('/home/kassaad/Documents/Codes/Causality-time-series-different-sampling-rate/baselines/ts-FCI/RCode_TETRADjar_tsFCI/RCode_TETRADjar')
setwd('/home/kassaad/Documents/Codes/Causal-Summary-Graph-time-series-different-sampling-rate/baselines/ts-FCI/RCode_TETRADjar_tsFCI/RCode_TETRADjar')
start_up <- function() {
source('dconnected.R')
source('genData.R')
source('main_tetrad_fci.R')
source('plot_timeseries.R')
source('Plotting_Commands_Barplots.R')
source('plot_ts_pag.R')
source('realData_tsfci.R')
source('scores.R')
source('Simulation_Commands.R')
source('Simulations_data_cont.R')
source('Simulations_data_disc.R')
source('Simulations_graph.R')
source('Tetrad_R_interact.R')
source('ts_functions.R')
}
start_up()
temporal_to_summary <- function(temporal_graph, nrep=5){
dlag <- ncol(temporal_graph)
d <- dlag/nrep
idx_count = rep(1:d, nrep)
summary_graph = matrix(data=0, nrow=d, ncol = d)
for (i in 1:dlag){
temp = temporal_graph[i,]
for (j in 1:dlag){
if (temp[j]==2){
i_summary <- idx_count[i]
j_summary <- idx_count[j]
summary_graph[i_summary,j_summary] = 2
}
else if (temp[j]==3){
i_summary <- idx_count[i]
j_summary <- idx_count[j]
if (summary_graph[i_summary,j_summary]!=2){
summary_graph[i_summary,j_summary] = 3
}
}
else if (temp[j]==1){
i_summary <- idx_count[i]
j_summary <- idx_count[j]
if (summary_graph[i_summary,j_summary]==0){
summary_graph[i_summary,j_summary] = 1
}
}
}
}
for (i in 1:ncol(summary_graph)){
if(summary_graph[i,i] ==2){
summary_graph[i,i] =1
}
}
return(summary_graph)
}
scale_name <- "unscaled"
struct_name <- "7ts_2h"
path_data <- '/home/kassaad/Documents/Codes/Causal-Summary-Graph-time-series-different-sampling-rate/data/simulated_ts_data'
path_algo <- '/home/kassaad/Documents/Codes/Causal-Summary-Graph-time-series-different-sampling-rate/baselines/ts-FCI/RCode_TETRADjar_tsFCI/RCode_TETRADjar'
path_save_res <- '/home/kassaad/Documents/Codes/Causal-Summary-Graph-time-series-different-sampling-rate/experiments/causal_discovery/R_results/tsfci'
setwd(paste(path_data,scale_name, sep="/"))
filenames <- list.files(struct_name, pattern="*.csv")
sig=0.01
lag=5
for (i in 1:length(filenames)){
setwd(paste(path_data,scale_name, sep="/"))
data = read.csv(paste(struct_name,filenames[i],sep="/"))
data$X <- NULL
setwd(path_algo)
tsfci_graph <- realData_tsfci(data=data, sig=sig, nrep=lag, inclIE=FALSE, alg="tscfci", datatype="continuous", makeplot=FALSE)
unit_graph <- temporal_to_summary(tsfci_graph, nrep=lag)
print(unit_graph)
setwd(path_save_res)
path<-paste(struct_name,filenames[i],sep="/res_")
write.csv(unit_graph,path)
}
data
data$X <- NULL
data
#setwd('/home/kassaad/Documents/Codes/Causality-time-series-different-sampling-rate/baselines/ts-FCI/RCode_TETRADjar_tsFCI/RCode_TETRADjar')
setwd('/home/kassaad/Documents/Codes/Causal-Summary-Graph-time-series-different-sampling-rate/baselines/ts-FCI/RCode_TETRADjar_tsFCI/RCode_TETRADjar')
start_up <- function() {
source('dconnected.R')
source('genData.R')
source('main_tetrad_fci.R')
source('plot_timeseries.R')
source('Plotting_Commands_Barplots.R')
source('plot_ts_pag.R')
source('realData_tsfci.R')
source('scores.R')
source('Simulation_Commands.R')
source('Simulations_data_cont.R')
source('Simulations_data_disc.R')
source('Simulations_graph.R')
source('Tetrad_R_interact.R')
source('ts_functions.R')
}
start_up()
temporal_to_summary <- function(temporal_graph, nrep=5){
dlag <- ncol(temporal_graph)
d <- dlag/nrep
idx_count = rep(1:d, nrep)
summary_graph = matrix(data=0, nrow=d, ncol = d)
for (i in 1:dlag){
temp = temporal_graph[i,]
for (j in 1:dlag){
if (temp[j]==2){
i_summary <- idx_count[i]
j_summary <- idx_count[j]
summary_graph[i_summary,j_summary] = 2
}
else if (temp[j]==3){
i_summary <- idx_count[i]
j_summary <- idx_count[j]
if (summary_graph[i_summary,j_summary]!=2){
summary_graph[i_summary,j_summary] = 3
}
}
else if (temp[j]==1){
i_summary <- idx_count[i]
j_summary <- idx_count[j]
if (summary_graph[i_summary,j_summary]==0){
summary_graph[i_summary,j_summary] = 1
}
}
}
}
for (i in 1:ncol(summary_graph)){
if(summary_graph[i,i] ==2){
summary_graph[i,i] =1
}
}
return(summary_graph)
}
scale_name <- "unscaled"
struct_name <- "7ts_2h"
path_data <- '/home/kassaad/Documents/Codes/Causal-Summary-Graph-time-series-different-sampling-rate/data/simulated_ts_data'
path_algo <- '/home/kassaad/Documents/Codes/Causal-Summary-Graph-time-series-different-sampling-rate/baselines/ts-FCI/RCode_TETRADjar_tsFCI/RCode_TETRADjar'
path_save_res <- '/home/kassaad/Documents/Codes/Causal-Summary-Graph-time-series-different-sampling-rate/experiments/causal_discovery/R_results/tsfci'
setwd(paste(path_data,scale_name, sep="/"))
filenames <- list.files(struct_name, pattern="*.csv")
sig=0.01
lag=5
for (i in 1:length(filenames)){
setwd(paste(path_data,scale_name, sep="/"))
data = read.csv(paste(struct_name,filenames[i],sep="/"))
data$time_index <- NULL
setwd(path_algo)
tsfci_graph <- realData_tsfci(data=data, sig=sig, nrep=lag, inclIE=FALSE, alg="tscfci", datatype="continuous", makeplot=FALSE)
unit_graph <- temporal_to_summary(tsfci_graph, nrep=lag)
print(unit_graph)
setwd(path_save_res)
path<-paste(struct_name,filenames[i],sep="/res_")
write.csv(unit_graph,path)
}
